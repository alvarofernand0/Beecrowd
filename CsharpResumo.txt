
========================================================

		C# fundamentos 

========================================================


---- -----  -- -------   -------- --  - -------- ---- --


TIPOS DE VARIÁVEIS: int, var, bool, float, double, string;

*tudo em c# é string, então usar Parse. para converter..

========================================================

COMENTÁRIOS: // uma linha
/*  várias linhas  */
/// Notação XML (Metadata)

ATALHOS: seleciona e dá Ctrl + k + c (comenta);
Ctrl + k + u (descomenta);

========================================================

TIPOS PRIMITIVOS:
ou built-in types
São tipos base cujo outros tipos (complexos) irão derivar

São classificados em:
Simple Types, Enums, Structs, Nullable Types

========================================================

NÚMEROS INTEIROS:

int/uint
short/ushort
long/ulong

u = unsigned/sem sinal usado quando não se pode receber
valores negativos.

========================================================

NÚMEROS REAIS:

float; double, decimal

possuem positivos e negativos por padrão.

Ex:

float salario = 2.500f;
double salario = 22.000;
decimal salario = 25.000m;

========================================================

BOOLEAN:

true or false

Ex:

using system;

	class Program
	{
		static void Main(string[] args)
		{

			bool usuarioJaCadastrado = false;
			bool pagamentoRecebido = true;
			var usuarioExpirado = false;
		}
	}


========================================================

CHAR:

guarda UM caractere no formato unicode;
atribuição de valor por aspas simples ''.

Ex:

char primeiraLetra = 'C';
var segundaLetra = 'D';

============================================

STRING:

Guarda uma cadeia de caracteres (uma lista de chars).
Atribuição de valores por aspas duplas "".

Ex:

string texto = "Meu texto";
string numerico = "12345.22";
var texto = "Meu texto";

===========================================

VAR:

- substitui o nome de um tipo.
- será do tipo do primeiro valor atribuído.
- recomendado usar var depois de dominar os tipos.

Ex:

var idade = 25; será do tipo int
var nome = "João"; será do tipo string

===========================================

OBJECT:

- Tipo genérico que recebe qualquer valor ou objeto;
- Caso não saiba o tipo da informação ou ela sera de vários tipos diferentes;
- Evite usar;

Ex:

object idade = 25;     será do tipo object
object nome = "João";  será do tipo object

===========================================

Nullabel Types:

void: vazio ou não retorna nada;
null: vazio ou nada. Todo tipo pode receber o valor null;

- diferente de zero ou uma string vazia;
- usa-se uma interrogação após o tipo

Ex:

	int? idade = 0;
		console.WriteLine(idade);
	idade = null;
		Console.WriteLine(idade);
	idade = 25;
		Console.WriteLine(idade);

============================================

ALIAS:

- apelido que todo tipo no .NET tem;
- o resultado é o mesmo, mas é indicado usar sempre o alias;

Ex:

int idade = 25;  Alias
Int32 idade = 25;  Tipo

============================================

VALORES PADRÕES:

- Todo tipo built-in já possui um valor padrão;
- Se nenhum valor for informado, seu valor padrão será usado;

	int = 0
	float = 0
	decimal = 0
	bool = false
	char = '\0'
	string = ""

============================================

CONVERSÃO IMPLÍCITA:

float valor = 25.8f;
int outro = 25;

valor = outro  //  Conversão implícita

===========================================

CONVERSÃO EXPLÍCITA:

- Ocorre quando os tipos não são compatíveis;
- É dada pelo uso do tipo entre parênteses antes da atribuição;

Ex:

int inteiro = 100;
uint inteiroSemSinal = (uint) inteiro;   // Conversão explícita


============================================


PARSE:

- Método presente em todo tipo primitivo;
- Usado para converter um caractere ou string para um tipo qualquer;
- Caso haja alguma incompatibilidade, gera um erro;

Ex:

int inteiro = int.Parse("100"); 

============================================

CONVERT:

- Similar ao Parse, porém permite converter vários tipos
de valor, não apenas string;
- Devemos informar o tipo na chamada da conversão;

Ex:

int inteiro = Convert.ToInt32("100");

==========================================

OPERAÇÕES ARITMÉTICAS:

- Soma +
- Subtração -
- Multiplicação *
- Divisão /
- Resto da divisão ou Mod %

Obs:

- Multiplicação e divisão são executadas primeiro;
- Caso queira outra ordem, usar parênteses;
- Aceita short, int, float, double e decimal;

Ex:

-Em caso de números inteiros, se o resultado for real,
será arredondado;

4.4 => 5


int soma = 25 + 22;   //47
int subtracao = 25 - 22;    //3
int multiplicacao = 25 * 22;   //550
int divisao = 22 / 5;    // 4 foi arredondado

---------------------------------------

- Utilizar parênteses para redefinir a ordem de execução;

int x = 2 + 2 * 2 => 6
int y = 2 + (2 * 2) => 6  mesmo resultado
int z = (2 + 2) * 2 => 8 executou a soma primeiro


===========================================================


OPERAÇÕES DE ATRIBUIÇÃO:

- Usa-se = para atribuir um valor;
- Pode-se usar igual junto a um operador aritmético;

Ex:

X += 5 

é o mesmo que...

X = X + 5

 
		outros exemplos: 
				
				int x = 0;  atribuição
				
				x -= 5  é o mesmo que x = x + 5;
				
				x *= 10 é o mesmo que x * 10;

				x /= 2 é o mesmo que x = x / 2;



===================================================================

OPERADORES DE ATRIBUIÇÃO:

- Pode-se comparar qualquer tipo de dado: números, strings, bytes...

-A comparação SEMPRE retorna True or False;

Ex:

- Igual: ==

- Diferente: !=

- Maior que: >

- Menor que: <

- Maior ou igual a: >=

- Menor ou igual a: <=

-------------------------------------------------

Ex:

int x = 25;

x == 0;  // False

x != 0;  // True

x > 0; // True

x < 0;  // False

x <= 0;  // False

x >= 0;  // True


===========================================================

OPERADORES LÓGICOS:

- Usados em operações condicionais;
- Retorna SEMPRE verdadeiro ou falso;

------------------------------

E - AND: &&

OU - OR: ||

NEGAÇÃO - NOT: !


Ex:

	int x = 12;
	bool e = (x > 25) && (x < 40);  //False
	bool ou = (x > 25) || (x < 40);  //True
	bool negacao = !(x < 25);   //False

================================================================

ESTRUTURA CONDICIONAL IF:

- Tradução: "SE", ou seja, "Caso alguma condição seja atendida";
- Usado para tomada de decisões;
- Utiliza os operadores lógicos;

---------------------------------------

ESTRUTURA CONDICIONAL ELSE:

- Complemento do IF;
- Caso a condição não seja atendida;
- Podemos ter
	else if (condição)
	não tem limites (Mas cuidado)

- Podemos ter else para executar algo caso a condição seja atendida;

Ex:

	if(condicao) { // Caso seja verdadeiro
		...
	}

	if(condicao) //Caso seja verdadeiro;
		...   //Caso só haja uma linha, não precisa de chaves;

------------------------------------------------

Ex:

	if(condicao) { // caso seja verdadeiro
	} else {  // Caso seja falso
		...
	}

	if(condicao) //Caso seja verdadeiro
		...  //Caso só haja uma linha, não precisa de chaves
	else //Caso seja falso
		...

====================================================================

ESTRUTURA CONDICIONAL SWITCH:

- Utilizado quando temos muitas decisões;

- Executado em cascata;

- Devemos parar manualmente a execução com o comando BREAK;

- Possui uma execução padrão chamada 'default';


Ex:

	int valor = 1;
	switch (valor)
	{
		case 1: Console.WriteLine("1"); break;
		case 2: Console.WriteLine("2"); break;
		case 3: Console.WriteLine("3"); break;
		default: Console.WriteLine("4"); break;  //Se não for nenhum acima, será esse;

=====================================================================

LAÇOS DE REPETIÇÃO: FOR

- Tradução "para", ou seja, para cada item em um valor;

- Executa uma determinada ação várias vezes;

- Definido pela palavra 'for';

- Exige 3 parâmetros:

	- Contador;
	- Condição;
	- Incremento;

Ex:

	for (var i = 0; i <=5; i++)


Ex:

	//Conta de 0 a 5

	for (var i = 0; i <= 5; i++)
		Console.WriteLine(i);
	
	//Conta de 1 a 5
	
	for (var i = 1; i <=5; i++)
		Console.WriteLine(i);

	//Conta de 0 a 4

	for (var i = 0; i < 5; i++)
		Console.WriteLine(i);

	//Conta de 5 a 0
	
	for (var i = 5; i >= 0; i--)
		Console.WriteLine(i);









